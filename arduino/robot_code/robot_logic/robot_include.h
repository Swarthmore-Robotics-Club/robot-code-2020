#ifndef __ROBOT_INCLUDE_
#define __ROBOT_INCLUDE_

#define PIN_MOTOR_LEFT_PWM PB0
#define PIN_MOTOR_RIGHT_PWM PB1
#define PIN_MOTOR_LEFT_A PB5
#define PIN_MOTOR_LEFT_B PA8
#define PIN_MOTOR_RIGHT_A PB7
#define PIN_MOTOR_RIGHT_B PB6

#define PIN_ENCODER_LEFT_A PA6
#define PIN_ENCODER_LEFT_B PA4
#define PIN_ENCODER_RIGHT_A PA9
#define PIN_ENCODER_RIGHT_B PA10

#define PIN_DISTANCE_SENSOR_FRONT_LEFT PA0
#define PIN_DISTANCE_SENSOR_FRONT_RIGHT PA1
#define PIN_DISTANCE_SENSOR_REAR_LEFT PA7
#define PIN_DISTANCE_SENSOR_REAR_RIGHT PA5
#define PIN_DISTANCE_SENSOR_FRONT PA11

#define ROBOT_RADIUS 4.8
#define ROBOT_WIDTH (ROBOT_RADIUS*2.0)
#define ROBOT_CIRCUMFERENCE (ROBOT_WIDTH * PI)
#define WHEEL_RADIUS 2
#define WHEEL_CIRCUMFERENCE (2. * WHEEL_RADIUS * PI)
#define TICKS_PER_REVOLUTION 900
#define DISTANCE_PER_TICK (WHEEL_CIRCUMFERENCE / TICKS_PER_REVOLUTION)
#define VELOCITY_WINDOW_WEIGHT (0.5)
#define V_MAX (20.)
#define V_RAMP_RATE (50.)

typedef struct {
  float left_velocity;
  float right_velocity;
} robot_velocity;

typedef enum {
  RS_IDLE,
  RS_FORWARD,
  RS_ROTATE,
  RS_WALL_ALIGN,
  RS_PRE_FORWARD,
  RS_PRE_ROTATE,
  RS_PRE_WALL_ALIGN
} robot_state_t;

#endif
